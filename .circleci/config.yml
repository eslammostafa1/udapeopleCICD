version: 2.1

commands:
    install_awscli:
      description: install AWS CLI v2
      steps:
        - run: 
            name: install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
    
    install_nodejs:  #we will install nodejs 13.8.0
      description: Install Node.js 13.8.0
      steps:
        - run:
            name: Install Node.js 13.8.0
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
              sudo apt install -y nodejs
              # # Use n version manager to use Node.js v13.8.0
              # sudo npm install --global n
              # sudo n 13.8.0

    install_ansible:
      description: install Ansible 
      steps:
        - run: 
            name: install Ansible 
            command: |
              sudo apt update
              sudo apt install software-properties-common -y
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y

    destroy-environment: #step for create destroy-environment
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environment
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm test          
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm test      
  
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure: # create deploy-infrastructure
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure Backend Infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add Backend Ip to Ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
         

 
  configure-infrastructure:  # create configure-infrastructure
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["8c:8b:0b:1d:52:b5:46:07:5a:c5:22:94:4d:99:c8:8b"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - destroy-environment   

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

  deploy-frontend: # create deploy-frontend
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt-get install tar gzip -y
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install   
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

                    
  deploy-backend: # create deploy-backend
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run: sudo apt-get install tar gzip -y
      - run: 
          name: Install aws_cli
          command: |
            #test
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install    
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["8c:8b:0b:1d:52:b5:46:07:5a:c5:22:94:4d:99:c8:8b"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name:
          command: |
            cd backend
            npm install
      - run:
          name: Package backend
          command: |
            cd backend
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            cd .. 
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
            
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      - destroy-environment    

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]